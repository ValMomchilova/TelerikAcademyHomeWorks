Singleton e клас, от който е необходимо на има само една единствена инстанция. Това може да е необходимо в рамките на приложение, на сесия, заявка или друг контекст.
Имаме нужда от Singleton, ако е нужно:
- да е сигурно, че имаме само една инстанция и глобален достъп до нея (В рамките на желания контекст)
- да инстанцираме обекта когато ни потрябва за първи път и само, ако ни потрбява.
Singleton:
- Дефинира операция Instance, която дава на клиентите възможност да достигнат до уникалната инстанция. Instance може да бъде метод или property.
- Може да бъде отговорен за създаването на своята уникална инстанция.
- Клиентите достигат до инстанцията единствено през Instance.

За правилна имплементация е необходимо :
1. Да се дефинира private static attribute в класа, който да държи инстанцията.
2. Да се дефинира public static функция да достъп (method, property на класа)
3. Да се подсигури "lazy initialization" (създаване при първа необходимост) в публичаната функция за достъп
4. Всички конструктори трябва да бъдат protected или private
5. Клиентът трябва да може да използва само и единствено публичаната функция за достъп за манипулиране на Singleton инстанцията.

Връзки с други шаблони за дизайн:
- Singleton можед а се използва при импелементацията на Abstract Factory, Builder, and Prototype.
- Facade objects are often Singletons because only one Facade object is required.
- State objects are often Singletons.
- Facade обектите често са Singletons.
- State обектите често са Singleton.

При имплементация е важно да се мисли за Thread Safe, ако приложението е многонишково.
Различни имплементации с техните предимства и недосатъци са много добре описани в http://csharpindepth.com/articles/general/singleton.aspx
